import {buildSrc} from '@imagekit/react'
import {ErrorOutlineIcon} from '@sanity/icons'
import {Box, Card, CardTone, Spinner, Stack, Text} from '@sanity/ui'
import {useEffect, useMemo, useRef, useState} from 'react'
import {styled} from 'styled-components'

import {useInView} from '../hooks/useInView'
import {useSecretsDocumentValues} from '../hooks/useSecretsDocumentValues'
import {THUMBNAIL_ASPECT_RATIO} from '../util/constants'
import type {AssetThumbnailOptions} from '../util/types'

const Image = styled.img`
  transition: opacity 0.175s ease-out 0s;
  display: block;
  width: 100%;
  height: 100%;
  object-fit: contain;
  object-position: center center;
`

type ImageStatus = 'loading' | 'error' | 'loaded'

const STATUS_TO_TONE: Record<ImageStatus, CardTone> = {
  loading: 'transparent',
  error: 'critical',
  loaded: 'default',
}

export default function VideoThumbnail({
  asset,
  width,
}: {
  asset: AssetThumbnailOptions['asset']
  width?: number
}) {
  const ref = useRef<HTMLDivElement | null>(null)
  const inView = useInView(ref)
  const posterWidth = width || 250

  const [status, setStatus] = useState<ImageStatus>('loading')
  const {value} = useSecretsDocumentValues()
  const urlEndpoint = value.secrets.urlEndpoint

  const src = useMemo(() => {
    try {
      // Generate thumbnail URL based on asset data
      if (!asset?.fileId || !urlEndpoint) {
        if (status !== 'error') setStatus('error')
        return undefined
      }

      // Check if we have the file path from asset data
      const filePath = asset.data?.filePath

      let srcPath
      if (filePath) {
        // Use the full file path for transformation
        srcPath = filePath
      } else if (asset.url) {
        // Extract path from the URL if we have it
        try {
          const url = new URL(asset.url)
          srcPath = url.pathname
        } catch (urlError) {
          srcPath = `/${asset.fileId}`
        }
      } else {
        // Fallback to fileId
        srcPath = `/${asset.fileId}`
      }

      // According to ImageKit docs, video thumbnails are generated by adding /ik-thumbnail.jpg
      // to the video file path, then applying transformations
      const thumbnailPath = `${srcPath}/ik-thumbnail.jpg`

      // Build transformation parameters
      const transformations: Array<Record<string, number | string>> = [
        {
          width: posterWidth,
        },
      ]

      // Add start offset if thumbTime is specified (in seconds)
      if (asset.thumbTime && asset.thumbTime > 0) {
        transformations[0].so = asset.thumbTime
      }

      const thumbnailUrl = buildSrc({
        urlEndpoint,
        src: thumbnailPath,
        transformation: transformations,
      })

      return thumbnailUrl
    } catch (err) {
      // If there's an error generating the URL, set status to error
      if (status !== 'error') setStatus('error')
      return undefined
    }
  }, [
    asset?.fileId,
    asset?.data?.filePath,
    asset?.url,
    asset?.thumbTime,
    posterWidth,
    status,
    urlEndpoint,
  ])

  // Reset loading state when fileId or urlEndpoint changes
  useEffect(() => {
    if (asset?.fileId && urlEndpoint) {
      setStatus('loading')
    } else {
      setStatus('error')
    }
  }, [asset?.fileId, urlEndpoint])

  // Only render spinner if component is in view and we're waiting for image to load
  const showSpinner = inView && status === 'loading'

  return (
    <Card ref={ref} tone={STATUS_TO_TONE[status]} radius={2}>
      <div
        style={{
          position: 'relative',
          width: '100%',
          height: '100%',
          overflow: 'hidden',
          borderRadius: 'inherit',
          aspectRatio: String(THUMBNAIL_ASPECT_RATIO),
        }}
      >
        {src && inView && (
          <Image
            src={src}
            alt={asset?.filename || 'Video thumbnail'}
            loading="lazy"
            onLoad={() => setStatus('loaded')}
            onError={() => {
              setStatus('error')
            }}
            style={{
              opacity: status === 'loaded' ? 1 : 0,
            }}
          />
        )}

        {showSpinner && (
          <Box
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            <Spinner />
          </Box>
        )}

        {status === 'error' && (
          <Stack
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            <Text size={1} muted align="center">
              <ErrorOutlineIcon style={{marginRight: '0.5em'}} />
              Unable to load thumbnail
            </Text>
          </Stack>
        )}
      </div>
    </Card>
  )
}
